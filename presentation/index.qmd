---
title: "How CI/CD Enhances the Development of R packages in the Pharmaverse"
subtitle: |
  R/Pharma

  November 10th, 2022

  Ben Straub (GSK) & Craig Gower-Page (Roche)
execute:
  echo: false
  warning: false
  error: false
  eval: true
  output: asis
  comment: ''
format:
  revealjs:
    slide-number: true
    chalkboard:
      buttons: false
    preview-links: auto
    logo: https://avatars.githubusercontent.com/u/84541169
    footer: <[CI-CD GitHub](https://github.com/pharmaverse/cicdworkshop.rinpharma2022)>
    theme: [simple, custom.scss]
    from: markdown+emoji
    link-external-icon: true
    link-external-newwindow: true
---

```{r}
render_file <- function(filepath, language = "yaml") {
  cat(paste0("```", language, "\n"))
  cat(readLines(filepath), sep = "\n")
  cat("```\n")
}
```

## What is CI/CD?

## Benefits of using CI/CD

::: columns
::: {.column width="45%"}
::: {.incremental}
- Multiple Contributors on your R Package ⌨️
- User base on multiple OSes and multiple R versions `r fontawesome::fa("users", "green")`
- Faster turnaround on Pull Requests ☑️
:::
:::

::: {.column width="45%"}
::: {.incremental}
- Catch issues (bugs) early on `r fontawesome::fa("bug", "red")`
- Enforce style conventions and preferences `r fontawesome::fa("pencil-square", "green")`
- Measure test coverage for new code `r fontawesome::fa("car-burst", "green")`
- Keep docs up-to-date `r fontawesome::fa("book", "red")`
:::
:::
:::

## Use cases where CI/CD was beneficial

For Admiral, NEST and RBMI.

## Package Integrity Checks

Common workflows

::: columns
::: {.column width="45%"}
::: {.incremental}
1. Unit Tests &nbsp; &nbsp; `r fontawesome::fa("code", "red")`
2. Link & URL Checks &nbsp; &nbsp;`r fontawesome::fa("link", "green")`
3. Spelling Checks &nbsp; &nbsp;`r fontawesome::fa("pen", "blue")`
4. Static Code Analysis &nbsp; &nbsp;`r fontawesome::fa("file-lines", "red")`
:::
:::

::: {.column width="45%"}
::: {.incremental}
5. Manual Pages &nbsp; &nbsp;`r fontawesome::fa("book", "green")`
6. Code Style &nbsp; &nbsp;`r fontawesome::fa("scroll", "red")`
7. Test Coverage &nbsp; &nbsp;`r fontawesome::fa("car-burst", "green")`
8. Publishing a pkgdown site &nbsp; &nbsp;`r fontawesome::fa("wifi", "blue")`
:::
:::
:::


## Check Templates

For Admiral, how checking ADAM templates works and why it's needed.

## Shiny App Testing

How NEST run Shiny apps tests

## Cross-sytem checks

Windows, Mac etc testing for CRAN compatibility

## Other notes

Cover the basics of CI/CD.

Explain the benefits of using CI/CD.

How do repetitive tasks get done automatically.

Fighting the limitations of CRAN,
Checking in-house environments


CI/CD for Assessment, validation.

From  a Pharma perspective, how does it do it.


Problem, solution approach to the problem: Solutions per project.
And as part of the solution, discuss features that were used?

## From CGP

Issue:
People not re-running document and manuals / namespace being out of date
solution:
CICD test to re-run document and throw an error if git status is not clean
 
 
 
Issue:
CRAN limits runs to 10 minutes
Solutions:
Extract vignettes to "as-is" instead of being built on the fly. CICD test to then re-build vignettes to make sure they don't error  (rather than being done in the CRAN-check)
  
Extraction of long running unit tests into their own "extended" set of tests. CRON CICD job that will run the extended unit tests (which last an hour) whilst regular set of unit tests run fine in a couple of minutes
  
 
 
 
Issue
Unit tests take a long while to run due to the need to compile code
Solution
Cache the src/ directory so that it is restored on each run (cache done separately per OS / R-version
 
 
 
Issue:
Need to give confidence that our package is reliable
Solution:
CICD "validation" job to create a small report that emulates the sort of validation reports that get made locally
 
 
 
Issue:
Need to ensure code works on internal servers
Solution
DockerFile that emulates internal servers + cicd job to ensure code works in it
 
 


Issue:
Need to ensure code works on CRAN
Solution:
Have a manually triggered job that runs on servers that try to emulate CRANS servers as closely as possible. 
