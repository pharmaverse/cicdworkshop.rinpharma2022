---
title: "CI/CD Workshop for R Packages"
subtitle: "R in Pharma, November 4th, 2022"
execute:
  echo: false
  warning: false
  error: false
  eval: true
  output: asis
  comment: ''
format:
  revealjs:
    slide-number: true
    chalkboard:
      buttons: false
    preview-links: auto
    logo: https://avatars.githubusercontent.com/u/84541169
    footer: <[CI-CD GitHub](https://github.com/pharmaverse/cicdworkshop.rinpharma2022)>
    theme: [simple, custom.scss]
    from: markdown+emoji
    link-external-icon: true
    link-external-newwindow: true
---

```{r}
render_file <- function(filepath, language = "yaml") {
  cat(paste0("```", language, "\n"))
  cat(readLines(filepath), sep = '\n')
  cat("```\n")
}
```

## Hello CI/CD

<br>

This workshop will both discuss and show you how to implement 8 **simple** CI/CD workflows for a **bare bones** R package

::: {.incremental}
* Emphasis on the **simple** and the **bare bones**
* A bare bones R packages means we can focus on the workflows
:::

## What to expect for next 3 hours?

<br>

::: {.incremental}
* Setting up GitHub and RStudio (20 mins)
  - Totally fine to sit back and watch the magic as well
* Discussion on Flow of the Workshop (5 mins)
* Discussion on why CI/CD can be helpful for developing software projects and our background (10 mins)
* Work through the 8 workflows (remainder of the workshop)
* Break for 5 mins after 2 worfklows
:::

## Preparation for the Workshop

::: {.absolute top="0" left="100%"}
::: {.sectionhead}
[Setup]{style="opacity:0.25"}
:::
:::

::: {.incremental}
- Set up GitHub to Run our CI/CD checks through GitHub Actions
- Set up RStudio Cloud Classroom for both ease of access and setup
- Quick overview of **bare bones** R package as our learning tool
- We will do each step with you both for Setup and Workflows

:::

## GitHub

::: {.absolute top="0" left="100%"}
::: {.sectionhead}
[Setup]{style="opacity:0.25"}
:::
:::

::: {.incremental}
- Use GitHub Template from [CI/CD Workshop at R/Pharma conference 2022](https://github.com/pharmaverse/cicdworkshop.rinpharma2022)
  - Templates are great ways to help "set things" up without all the baggage of forking a repo
  - Copy the template to your personal area on GitHub
  - Mark as public (private repos will cost you money)
- Create a new branch called `devel`
- Set up a [Personal Access Token](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token)
:::

## RStudio Cloud

::: {.absolute top="0" left="100%"}
::: {.sectionhead}
[Setup]{style="opacity:0.25"}
:::
:::

::: {.incremental}
- We recommend using RStudio Cloud for ease of use.  However, okay to use other RStudio infrastructure, but harder for us to diagnose or help.
- Sharing the RStudio Classroom link in Chat
- Using `https` link, clone into your RStudio Session
- Install the `{devtools}` package.
- Use `devtools::install_dev_deps()` to quickly get all necessary packages
:::

## Link GitHub and RStudio

::: {.absolute top="0" left="100%"}
::: {.sectionhead}
[Setup]{style="opacity:0.25"}
:::
:::

::: {.incremental}
- Using Git Tab switch to `devel` branch
- Let's do a test commit
  - Modify the `README.md` file by adding today's date
  - Click Commit button > click check box > add a message
  - Push up the Commit to GitHub
  - Verify Push was completed (might need a refresh)
- Good practice to Pull Down
:::

## Flow for Workshop

```{mermaid}
flowchart TD
  A(Discuss the need <br> for the Workflow) --> B(Copy Code and place <br> into .github/workflows folder)
  B --> C(Push up into devel branch)
  C --> D(Watch GitHub give you <br> feedback on the workflow)
  D --> E(Address Feedback and <br> fix in the devel branch)
  E --> F(Discuss successful implementation)
  F --> A[Discuss the need <br> for the Workflow]
```

::: footer
:::


## Why use CI/CD for a R package?

::: columns
::: {.column width="45%"}
::: {.incremental}
- Multiple Contributors on your R Package :keyboard:
- User base on multiple types of OS and multiple versions of R `r fontawesome::fa("handshake", "blue")`
- Faster turnaround on Pull Requests :heavy_check_mark:
:::
:::

::: {.column width="45%"}
::: {.incremental}
- Flag coding issues for the contributor `r fontawesome::fa("flag", "red")`
- Enforce coding style conventions `r fontawesome::fa("pencil-square", "green")`
- New functions with poor test coverage `r fontawesome::fa("car-burst", "green")`
- Documentation with typos, broken links code snippets not conforming to style. `r fontawesome::fa("scroll", "red")`
:::
:::
:::

## The R Package for the Workshop

```{r}
render_file(file.path('..', 'DESCRIPTION'), "r")
```


## The R Package for the Workshop

Package is super lean to help focus on the CI/CD part.

```{r}
cat(paste0("```bash\n"))
library(fs)
tree <- dir_tree("..", recurse = 1)
cat("```")
```


## The 8 Workflows we are going to implement

::: {.absolute top="0" left="100%"}
::: {.sectionhead}
1 [2 3 4 5 6 7 8]{style="opacity:0.25"}
:::
:::
<!-- https://fontawesome.com/icons/file-lines?s=solid&f=classic  -->

::: columns
::: {.column width="45%"}
::: {.incremental}
1. R-CMD Check &nbsp; &nbsp; `r fontawesome::fa("code", "red")`
2. Links & URLs &nbsp; &nbsp;`r fontawesome::fa("link", "green")`
3. Spelling Checks &nbsp; &nbsp;`r fontawesome::fa("pen", "blue")`
4. Linters  &nbsp; &nbsp;`r fontawesome::fa("file-lines", "red")`
:::
:::

::: {.column width="45%"}
::: {.incremental}
5. Manual Pages &nbsp; &nbsp;`r fontawesome::fa("book", "green")`
6. Style &nbsp; &nbsp;`r fontawesome::fa("scroll", "red")`
7. Test Coverage &nbsp; &nbsp;`r fontawesome::fa("car-burst", "green")`
8. Publishing a pkgdown site &nbsp; &nbsp;`r fontawesome::fa("wifi", "blue")`
:::
:::
:::

## R-CMD Checks `r fontawesome::fa("code", "red")`

::: {.absolute top="0" left="100%"}
::: {.sectionhead}
1 [2 3 4 5 6 7 8]{style="opacity:0.25"}
:::
:::

<br>
Why have a workflow that checks the Package Build?
<br>


::: {.incremental}
- Check to make sure it runs on multiple versions of R
- Check to make sure it runs on multiple snapshots of R packages
- Check to make sure it runs on different OS
- Check integrity of code from contributors before you review the Pull Request
:::


## R-CMD Workflow `r fontawesome::fa("code", "red")`

::: {.absolute top="0" left="100%"}
::: {.sectionhead}
1 [2 3 4 5 6 7 8]{style="opacity:0.25"}
:::
:::

```{r}
render_file(file.path('..', '.github', 'workflows', 'r-cmd-check.yml'))
```

::: footer
Advanced Usage: [AdmiralCI's R CMD Check Workflow](https://raw.githubusercontent.com/pharmaverse/admiralci/main/.github/workflows/r-cmd-check.yml)
:::

## R-CMD Checks `r fontawesome::fa("code", "red")`

::: {.absolute top="0" left="100%"}
::: {.sectionhead}
1 [2 3 4 5 6 7 8]{style="opacity:0.25"}
:::
:::

* Copy the workflow into your `/github/workflows` folder
* Commit and Push up to your `devel` branch
* Let GitHub Identify the issue with the package
* Let's fix that issue in RStudio
* Commit, Push and let's see if our fix is working!

## R-CMD Checks `r fontawesome::fa("code", "red")`

::: {.absolute top="0" left="100%"}
::: {.sectionhead}
1 [2 3 4 5 6 7 8]{style="opacity:0.25"}
:::
:::

- Success! We have our first Workflows running in our Pull Request!

![](images/success_rcmd.png)

## Links & URLs `r fontawesome::fa("link", "green")`

::: {.absolute top="0" left="100%"}
::: {.sectionhead}
[1]{style="opacity:0.25"} 2 [3 4 5 6 7 8]{style="opacity:0.25"}
:::
:::

<br>
Why have a workflow that checks Links in your Package?
<br>


::: {.incremental}
- Cited resources for function development stay current and up to date.
- Internal or External website updates cause link breakage
- Contributors type in a link incorrectly
:::

## Links Workflow `r fontawesome::fa("link", "green")`

::: {.absolute top="0" left="100%"}
::: {.sectionhead}
[1]{style="opacity:0.25"} 2 [3 4 5 6 7 8]{style="opacity:0.25"}
:::
:::

```{r}
render_file(file.path('..', '.github', 'workflows', 'links.yml'))
```

::: footer
Advanced Usage: [AdmiralCI's Link Check Workflow](https://raw.githubusercontent.com/pharmaverse/admiralci/main/.github/workflows/links.yml)
:::

## Links & URLs `r fontawesome::fa("link", "green")`

::: {.absolute top="0" left="100%"}
::: {.sectionhead}
[1]{style="opacity:0.25"} 2 [3 4 5 6 7 8]{style="opacity:0.25"}
:::
:::

* Copy the workflow into your `/github/workflows` folder
* Commit and Push up to your `devel` branch
* Let GitHub identify the issue with the package
* Let's fix that issue in RStudio
* Commit, Push and let's see if our fix is working!

## Links & URLs `r fontawesome::fa("link", "green")`

- Success! We have two Workflows running in our Pull Request!

![](images/success_rcmd.png)

## Spelling Checks `r fontawesome::fa("pen", "blue")`

::: {.absolute top="0" left="100%"}
::: {.sectionhead}
[1 2]{style="opacity:0.25"} 3 [4 5 6 7 8]{style="opacity:0.25"}
:::
:::

<br>
Why have a workflow that checks the spelling in your package?
<br>


::: {.incremental}
- Industry-specific jargon and acronyms
- Contributors speak different languages
- Focus on the important parts of a Pull Request
:::

## Spelling Workflow `r fontawesome::fa("pen", "blue")`

::: {.absolute top="0" left="100%"}
::: {.sectionhead}
[1 2]{style="opacity:0.25"} 3 [4 5 6 7 8]{style="opacity:0.25"}
:::
:::

```{r}
render_file(file.path('..', '.github', 'workflows', 'spellcheck.yml'))
```

## Spelling Checks `r fontawesome::fa("pen", "blue")`

::: {.absolute top="0" left="100%"}
::: {.sectionhead}
[1 2]{style="opacity:0.25"} 3 [4 5 6 7 8]{style="opacity:0.25"}
:::
:::

* Copy the workflow into your `/github/workflows` folder
* Commit and Push up to your `devel` branch
* Let GitHub Identify the issue with the package
* Let's fix that issue in RStudio
* Commit, Push and let's see if our fix is working!

## Spelling Checks `r fontawesome::fa("pen", "blue")`

::: {.absolute top="0" left="100%"}
::: {.sectionhead}
[1 2]{style="opacity:0.25"} 3 [4 5 6 7 8]{style="opacity:0.25"}
:::
:::

- Success! 3 Workflows running on our Pull Request!

![](images/success_rcmd.png)

::: footer
Advanced Usage: [AdmiralCI's Spellcheck Workflow](https://raw.githubusercontent.com/pharmaverse/admiralci/main/.github/workflows/spellcheck.yml)
:::

## Linter `r fontawesome::fa("file-lines", "red")`

::: {.absolute top="0" left="100%"}
::: {.sectionhead}
[1 2 3]{style="opacity:0.25"} 4 [5 6 7 8]{style="opacity:0.25"}
:::
:::

<br>
Why have a workflow that runs a Linter in your Package?
<br>


::: {.incremental}
- ...
- ...
- ...
:::

## Linter Workflow `r fontawesome::fa("file-lines", "red")`

::: {.absolute top="0" left="100%"}
::: {.sectionhead}
[1 2 3]{style="opacity:0.25"} 4 [5 6 7 8]{style="opacity:0.25"}
:::
:::

```{r}
render_file(file.path('..', '.github', 'workflows', 'linter.yml'))
```

::: footer
Advanced Usage: [AdmiralCI's `lintr` Workflow](https://raw.githubusercontent.com/pharmaverse/admiralci/main/.github/workflows/lintr.yml)
:::

## Linter `r fontawesome::fa("file-lines", "red")`

::: {.absolute top="0" left="100%"}
::: {.sectionhead}
[1 2 3]{style="opacity:0.25"} 4 [5 6 7 8]{style="opacity:0.25"}
:::
:::

* Copy the workflow into your `/github/workflows` folder
* Commit and Push up to your `devel` branch
* Let GitHub Identify the issue with the package
* Let's fix that issue in RStudio
* Commit, Push and let's see if our fix is working!

## Linter `r fontawesome::fa("file-lines", "red")`

::: {.absolute top="0" left="100%"}
::: {.sectionhead}
[1 2 3]{style="opacity:0.25"} 4 [5 6 7 8]{style="opacity:0.25"}
:::
:::

- Success! 4 Workflows running on our Pull Request!

![](images/success_rcmd.png)


## Manual Pages `r fontawesome::fa("book", "green")`

::: {.absolute top="0" left="100%"}
::: {.sectionhead}
[1 2 3 4]{style="opacity:0.25"} 5 [6 7 8]{style="opacity:0.25"}
:::
:::

<br>
Why have a workflow that checks your Manual pages in your Package?
<br>

::: {.incremental}
- ...
- ...
- ...
:::

## Manual Pages Workflow `r fontawesome::fa("book", "green")`

::: {.absolute top="0" left="100%"}
::: {.sectionhead}
[1 2 3 4]{style="opacity:0.25"} 5 [6 7 8]{style="opacity:0.25"}
:::
:::

```{r}
render_file(file.path('..', '.github', 'workflows', 'roxygen.yml'))
```

::: footer
Advanced Usage: [AdmiralCI's `roxygen` Workflow](https://raw.githubusercontent.com/pharmaverse/admiralci/main/.github/workflows/man-pages.yml)
:::

## Manual Pages `r fontawesome::fa("book", "green")`

::: {.absolute top="0" left="100%"}
::: {.sectionhead}
[1 2 3 4]{style="opacity:0.25"} 5 [6 7 8]{style="opacity:0.25"}
:::
:::

* Copy the workflow into your `/github/workflows` folder
* Commit and Push up to your `devel` branch
* Let GitHub Identify the issue with the package
* Let's fix that issue in RStudio
* Commit, Push and let's see if our fix is working!

## Manual Pages `r fontawesome::fa("book", "green")`

::: {.absolute top="0" left="100%"}
::: {.sectionhead}
[1 2 3 4]{style="opacity:0.25"} 5 [6 7 8]{style="opacity:0.25"}
:::
:::

- Success! 5 Workflows running on our Pull Request!

![](images/success_rcmd.png)


## Style `r fontawesome::fa("scroll", "red")`

::: {.absolute top="0" left="100%"}
::: {.sectionhead}
[1 2 3 4 5]{style="opacity:0.25"} 6 [7 8]{style="opacity:0.25"}
:::
:::

<br>
Why have a workflow that checks your Code Style in your Package?
<br>

::: {.incremental}
- ...
- ...
- ...
:::

## Style Workflow `r fontawesome::fa("scroll", "red")`

::: {.absolute top="0" left="100%"}
::: {.sectionhead}
[1 2 3 4 5]{style="opacity:0.25"} 6 [7 8]{style="opacity:0.25"}
:::
:::


```{r}
render_file(file.path('..', '.github', 'workflows', 'style.yml'))
```

::: footer
Advanced Usage: [AdmiralCI's `styler` Workflow](https://raw.githubusercontent.com/pharmaverse/admiralci/main/.github/workflows/style.yml)
:::

## Style `r fontawesome::fa("scroll", "red")`

::: {.absolute top="0" left="100%"}
::: {.sectionhead}
[1 2 3 4 5]{style="opacity:0.25"} 6 [7 8]{style="opacity:0.25"}
:::
:::

* Copy the workflow into your `/github/workflows` folder
* Commit and Push up to your `devel` branch
* Let GitHub Identify the issue with the package
* Let's fix that issue in RStudio
* Commit, Push and let's see if our fix is working!

## Style `r fontawesome::fa("scroll", "red")`

::: {.absolute top="0" left="100%"}
::: {.sectionhead}
[1 2 3 4 5]{style="opacity:0.25"} 6 [7 8]{style="opacity:0.25"}
:::
:::

- Success! 6 Workflows running on our Pull Request!

![](images/success_rcmd.png)

## Test Coverage `r fontawesome::fa("car-burst", "green")`

::: {.absolute top="0" left="100%"}
::: {.sectionhead}
[1 2 3 4 5 6]{style="opacity:0.25"} 7 [8]{style="opacity:0.25"}
:::
:::

<br>
Why have a workflow that checks the Test Coverage in your Package?
<br>

::: {.incremental}
- ...
- ...
- ...
:::

## Test Coverage `r fontawesome::fa("car-burst", "green")`

::: {.absolute top="0" left="100%"}
::: {.sectionhead}
[1 2 3 4 5 6]{style="opacity:0.25"} 7 [8]{style="opacity:0.25"}
:::
:::

```{r}
render_file(file.path('..', '.github', 'workflows', 'coverage.yml'))
```

::: footer
Advanced Usage: [AdmiralCI's `covr` Workflow](https://raw.githubusercontent.com/pharmaverse/admiralci/main/.github/workflows/coverage.yml)
:::

## Test Coverage `r fontawesome::fa("car-burst", "green")`

::: {.absolute top="0" left="100%"}
::: {.sectionhead}
[1 2 3 4 5 6]{style="opacity:0.25"} 7 [8]{style="opacity:0.25"}
:::
:::

* Copy the workflow into your `/github/workflows` folder
* Commit and Push up to your `devel` branch
* Let GitHub Identify the issue with the package
* Let's fix that issue in RStudio
* Commit, Push and let's see if our fix is working!

## Test Coverage `r fontawesome::fa("car-burst", "green")`

::: {.absolute top="0" left="100%"}
::: {.sectionhead}
[1 2 3 4 5 6]{style="opacity:0.25"} 7 [8]{style="opacity:0.25"}
:::
:::

- Success! 7 Workflows running on our Pull Request!

![](images/success_rcmd.png)

## Publishing a pkgdown site `r fontawesome::fa("wifi", "blue")`

::: {.absolute top="0" left="100%"}
::: {.sectionhead}
[1 2 3 4 5 6 7]{style="opacity:0.25"} 8 [ ]{style="opacity:0.25"}
:::
:::

<br>
Why have a workflow that checks the publishes your website of your Package?
<br>

::: {.incremental}
- ...
- ...
- ...
:::

## Publishing a pkgdown site `r fontawesome::fa("wifi", "blue")`

::: {.absolute top="0" left="100%"}
::: {.sectionhead}
[1 2 3 4 5 6 7]{style="opacity:0.25"} 8 [ ]{style="opacity:0.25"}
:::
:::

```{r}
render_file(file.path('..', '.github', 'workflows', 'pkgdown.yml'))
```

::: footer
Advanced Usage: [AdmiralCI's `pkgdown` Workflow](https://raw.githubusercontent.com/pharmaverse/admiralci/main/.github/workflows/pkgdown.yml)
:::

## Publishing a pkgdown site `r fontawesome::fa("wifi", "blue")`

::: {.absolute top="0" left="100%"}
::: {.sectionhead}
[1 2 3 4 5 6 7]{style="opacity:0.25"} 8 [ ]{style="opacity:0.25"}
:::
:::

* Copy the workflow into your `.github/workflows` folder
* Commit and Push up to your `devel` branch
* Let GitHub Identify the issue with the package
* Let's fix that issue in RStudio
* Commit, Push and let's see if our fix is working!

## Publishing a pkgdown site `r fontawesome::fa("wifi", "blue")`

::: {.absolute top="0" left="100%"}
::: {.sectionhead}
[1 2 3 4 5 6 7]{style="opacity:0.25"} 8 [ ]{style="opacity:0.25"}
:::
:::

- Success! 8 Workflows running on our Pull Request!

![](images/success_rcmd.png)


## We got 8! What's next?

- Further Reading
- Advanced Examples
  - rlib
  - others
- Presentation built with Quarto

