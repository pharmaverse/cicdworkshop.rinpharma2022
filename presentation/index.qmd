---
title: "CI/CD in the {pharmaverse}"
subtitle: |
  R/Pharma

  November 10th, 2022

  Ben Straub (GSK) & Craig Gower-Page (Roche)
execute:
  echo: false
  warning: false
  error: false
  eval: true
  output: asis
  comment: ''
format:
  revealjs:
    slide-number: true
    chalkboard:
      buttons: false
    preview-links: auto
    logo: https://avatars.githubusercontent.com/u/84541169
    footer: <[CI-CD GitHub](https://github.com/pharmaverse/cicdworkshop.rinpharma2022)>
    theme: [simple, custom.scss]
    from: markdown+emoji
    link-external-icon: true
    link-external-newwindow: true
---

```{r}
render_file <- function(filepath, language = "yaml") {
  cat(paste0("```", language, "\n"))
  cat(readLines(filepath), sep = "\n")
  cat("```\n")
}
```

## What is CI/CD? 

* Continuous Integration (CI): Frequent merging of several small changes into a main branch
* Continuous Delivery (CD): Repeatable deployment process when deciding to deploy

CI/CD bridges the gaps between development and operation activities and teams by **enforcing automation** in building, testing and deployment of applications. CI/CD services compile the incremental code changes made by developers, then link and package them into software deliverables

::: columns
::: {.column width="50%"}
![](cicd.jpg)

:::

::: {.column width="50%"}
::: {.incremental}
- ![](pharmaverse.png)
:::
:::
:::


::: footer
[Wikipedia: CI/CD](https://en.wikipedia.org/wiki/CI/CD#cite_note-2) [{pharmaverse}](https://github.com/pharmaverse)
:::

## Does it help?

<div class="centre">
![](automation.png)
</div>

::: {.incremental}
- ...Yes!  Yes, it does!!
:::

::: footer
[XKCD](https://xkcd.com/1319/)
:::

## How does CI/CD help R packages?

- Catch issues (bugs) early on 
- User base on multiple OSes and multiple R versions
- Faster turnaround on Pull Requests/Merge Requests
- Multiple Contributors on your R Package
- Enforce style conventions and preferences 
- Measure test coverage for new code 
- Keep docs up-to-date

## What could CI/CD for R packages look like?

::: columns
::: {.column width="45%"}
::: {.incremental}
1. Unit Tests 
2. Link & URL Checks
3. Spelling Checks
4. Static Code Analysis

:::
:::

::: {.column width="45%"}
::: {.incremental}
5. Manual Pages
6. Code Style
7. Test Coverage
8. Publishing a pkgdown site

<br>
<br>

We just did all these in the R/Pharma Workshop: [Intro to CI/CD for R Packages](https://pharmaverse.github.io/cicdworkshop.rinpharma2022/workshop/index.html#/title-slide)
:::
:::
:::

<br>
<br>

::: {.incremental}

:::

## Testing

### Unit Tests

1. Unit Tests: 
2. Test Coverage:
3. Integration tests:

## Static Code Analysis

1. Linting
2. Spell Check
3. Link & URL Checks

## Documentation

1. Man pages
2. pkgdown site


# Case Study - admiral

## About admiral
<br/>

:::: {.columns}

::: {.column width="75%"}
- To provide an open source, modularized toolbox that enables the pharmaceutical programming community to develop ADaM datasets in R.<br/>
- ADaM is one of the required standards for data submission to FDA (U.S.) and PMDA (Japan) for clinical trials
- Links
  - [CDISC](https://www.cdisc.org/)
  - [https://github.com/pharmaverse/admiral](https://github.com/pharmaverse/admiral)
:::

::: {.column width="25%"}
![](hex-admiral.png)
:::
::::


## Check Templates

For Admiral, how checking ADAM templates works and why it's needed.

## Need to give confidence that our package is reliable

CICD "validation" job to create a small report that emulates the sort of validation reports that get made locally


## Shiny App Testing

How NEST run Shiny apps tests



# Case Study - RBMI


<!--
## 
<div class="section-title">
Case Study - RBMI
</div>
::: {.notes}
An example of a manually constructed section title but looks like using a single "#" does the
trick so probs able to just ignore this
:::
-->





## About RBMI
<br/>

:::: {.columns}

::: {.column width="75%"}
- Reference Based Multiple Imputation<br/>
- Implements imputation for longitudinal data in accordance with the ICH E9(R1) Addendum on Estimands<br/>
- Acknowledgements to Alessandro Noci, Marcel Wolbers & Daniel Sabanes Bove<br/>
- Links
  - [https://arxiv.org/abs/2109.11162](https://arxiv.org/abs/2109.11162)
  - [https://github.com/insightsengineering/rbmi](https://github.com/insightsengineering/rbmi)
:::

::: {.column width="25%"}
![](rbmi.png)
:::
::::

::: {.notes}
Key component of the package is that many of the methods rely on resampling techniques to 
generate confidence intervals. This requires fitting potentially 1000's of MMRM models which
means run times tend to be in the order of minutes to hours for a full run of the package
depending on the size of the data
:::






## Package Development Problems
<br/>

- Installation takes >3 minutes to compile STAN code
- Full test suite takes >50 minutes to run
- Vignettes took >5 minutes to run
- Need to release on in-house servers running legacy versions of R
- Many PR's forgot to run `devtools::document()`
- Many PR's forgot to rebuild pkgdown site

<div class="centre">
![](sad-emoji.png)
</div>

::: {.notes}
2 key issues that we are about to cover:
- Need to get run times down to <10 minutes
- Need to ensure package works both on internal server and CRAN
:::






## Reducing the Test Suite Runtime
<br/>

```{r}
#| eval: FALSE
#| echo: TRUE 
test_that("Some long running section", {
  
    skip_if_not(Sys.getenv("R_TEST_FULL") == "TRUE")
    
    # <rest of the test code>
    
})
```

<br/>

```{bash}
#| eval: FALSE
#| echo: TRUE 
on:
  schedule:
    - cron: '0 4 1,15 * *'
```



## Need to ensure code works on internal servers

DockerFile that emulates internal servers + cicd job to ensure code works in it
 

## CRAN limits runs to 10 minutes

- Extract vignettes to "as-is" instead of being built on the fly
- CICD test to then re-build vignettes to make sure they don't error  (rather than being done in the CRAN-check)
- Extraction of long running unit tests into their own "extended" set of tests
- CRON CICD job that will run the extended unit tests (which last an hour) whilst regular set of unit tests run fine in a couple of minutes


## Unit tests take a long while to run due to the need to compile code

Cache the src/ directory so that it is restored on each run (cache done separately per OS / R-version

