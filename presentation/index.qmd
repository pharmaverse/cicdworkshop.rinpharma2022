---
title: "CI/CD Workshop for R Packages"
subtitle: |
  R/Pharma

  November 4th, 2022
execute:
  echo: false
  warning: false
  error: false
  eval: true
  output: asis
  comment: ''
format:
  revealjs:
    slide-number: true
    chalkboard:
      buttons: false
    preview-links: auto
    logo: https://avatars.githubusercontent.com/u/84541169
    footer: <[CI-CD GitHub](https://github.com/pharmaverse/cicdworkshop.rinpharma2022)>
    theme: [simple, custom.scss]
    from: markdown+emoji
    link-external-icon: true
    link-external-newwindow: true
---

```{r}
render_file <- function(filepath, language = "yaml") {
  cat(paste0("```", language, "\n"))
  cat(readLines(filepath), sep = "\n")
  cat("```\n")
}
```

## Hello CI/CD üëã

<br>

This workshop aims to discuss and show you how to implement 8 **simple** CI/CD workflows for a **bare bones** R package üì¶

::: {.incremental}
* Emphasis on the **simple** and the **bare bones** ü¶¥
* Which means that we can focus on the workflows üéØ
:::

## What to expect for next 3 hours?

<br>

::: {.incremental}
* Setting up GitHub and RStudio (20 mins) üé¨
  - Totally fine to sit back and watch the magic as well ü™Ñ
* Discussion on Flow of the Workshop (5 mins) üåä
* Discussion on why CI/CD is helpful for developing software and our background (10 mins) üí™
* Work through the 8 workflows üèó
* Break for 5 mins after every 2 worfklows ‚òïÔ∏è
:::

## Preparation for the Workshop

::: {.absolute top="0" left="100%"}
::: {.sectionhead}
[Setup]{style="opacity:0.25"}
:::
:::

::: {.incremental}
- Set up GitHub to run our CI/CD checks through GitHub Actions `r fontawesome::fa("github", "green")`
- Set up RStudio Cloud Classroom for both ease of access and setup `r fontawesome::fa("r", "blue")`
- Quick overview of the **bare bones** R package as our learning tool `r fontawesome::fa("box-open", "orange")`
- We will do each step with you both for Setup and Workflows `r fontawesome::fa("handshake-angle", "purple")`

:::

## GitHub Setup

::: {.absolute top="0" left="100%"}
::: {.sectionhead}
[Setup]{style="opacity:0.25"}
:::
:::

::: {.incremental}
- Use GitHub Template from [CI/CD Workshop at R/Pharma conference 2022](https://github.com/pharmaverse/cicdworkshop.rinpharma2022) 
  - Copy the template to your personal account on GitHub `r fontawesome::fa("copy", "purple")`
  - Mark your repository as public (private repos will cost you money) `r fontawesome::fa("unlock", "blue")`
- Create a new branch called `devel` within GitHub ü™µ
- Set up a [Personal Access Token](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token) üîë
:::

## RStudio Cloud Setup

::: {.absolute top="0" left="100%"}
::: {.sectionhead}
[Setup]{style="opacity:0.25"}
:::
:::

::: {.incremental}
- We recommend using RStudio Cloud for ease of use ‚òÅÔ∏è
  - We'll share the RStudio Classroom link in Chat üîó
  - However, it's okay to use other RStudio infrastructure `r fontawesome::fa("server", "white")`
- Start a new project in RStudio Cloud üìÅ
  - With the `https` link to your repo `r fontawesome::fa("clone", "indigo")`
- Install the `{devtools}` package ‚è¨
- Use `devtools::install_dev_deps()` to install all necessary packages `r fontawesome::fa("book", "blue")`
:::

## Link GitHub and RStudio

::: {.absolute top="0" left="100%"}
::: {.sectionhead}
[Setup]{style="opacity:0.25"}
:::
:::

::: {.incremental}
- Initialize your `git` credentials üîê

  ```bash
  git config --global user.name "Your GitHub username"
  git config --global user.email "your@email.id"
  ```

- Use the `Git` tab to switch to the `devel` branch üéõ
:::

## Link GitHub and RStudio

::: {.absolute top="0" left="100%"}
::: {.sectionhead}
[Setup]{style="opacity:0.25"}
:::
:::

::: {.incremental}
- Create a test commit üß™
  - Modify the `README.md` file by adding today's date üìÜ
  - Click on the `Commit` button > Stage `README.md` > Add a message üìú
  - Push the commit to GitHub ‚¨ÜÔ∏è
  - Verify the was completed on GitHub (might need a refresh) üîç
:::

## The R Package for the Workshop

```{r}
render_file(file.path("..", "DESCRIPTION"), "yaml")
```


## The R Package for the Workshop

```{r}
cat(paste0("```bash\n"))
library(fs)
tree <- dir_tree("..", regexp = "presentation", invert = T, recurse = 1)
cat("```")
```

## Flow for Workshop

```{mermaid}
flowchart TD
  A(Discuss workflow <br> purpose) --> B(Create <br> workflow)
  B --> C(Push <br> workflow)
  C --> D(Observe <br> feedback)
  D --> E(Address <br> feedback)
  E --> F(Discuss <br> implementation)
  F --> A
```

::: footer
:::


## Why use CI/CD for a R package?

::: columns
::: {.column width="45%"}
::: {.incremental}
- Multiple Contributors on your R Package ‚å®Ô∏è
- User base on multiple OSes and multiple R versions `r fontawesome::fa("users", "green")`
- Faster turnaround on Pull Requests ‚òëÔ∏è
:::
:::

::: {.column width="45%"}
::: {.incremental}
- Catch issues (bugs) early on `r fontawesome::fa("bug", "red")`
- Enforce style conventions and preferences `r fontawesome::fa("pencil-square", "green")`
- Measure test coverage for new code `r fontawesome::fa("car-burst", "green")`
- Keep docs up-to-date `r fontawesome::fa("book", "red")`
:::
:::
:::

## The 8 workflows we'll implement

::: {.absolute top="0" left="100%"}
::: {.sectionhead}
1 [2 3 4 5 6 7 8]{style="opacity:0.25"}
:::
:::
<!-- https://fontawesome.com/icons/file-lines?s=solid&f=classic  -->

::: columns
::: {.column width="45%"}
::: {.incremental}
1. R CMD Check &nbsp; &nbsp; `r fontawesome::fa("code", "red")`
2. Link & URL Checks &nbsp; &nbsp;`r fontawesome::fa("link", "green")`
3. Spelling Checks &nbsp; &nbsp;`r fontawesome::fa("pen", "blue")`
4. Linter &nbsp; &nbsp;`r fontawesome::fa("file-lines", "red")`
:::
:::

::: {.column width="45%"}
::: {.incremental}
5. Manual Pages &nbsp; &nbsp;`r fontawesome::fa("book", "green")`
6. Code Style &nbsp; &nbsp;`r fontawesome::fa("scroll", "red")`
7. Test Coverage &nbsp; &nbsp;`r fontawesome::fa("car-burst", "green")`
8. Publishing a pkgdown site &nbsp; &nbsp;`r fontawesome::fa("wifi", "blue")`
:::
:::
:::

## R CMD Check `r fontawesome::fa("code", "red")`

::: {.absolute top="0" left="100%"}
::: {.sectionhead}
1 [2 3 4 5 6 7 8]{style="opacity:0.25"}
:::
:::

<br>
Why have a workflow that checks the Package Build?
<br>


::: {.incremental}
- Check to make sure it runs on multiple versions of R
- Check to make sure it runs on multiple snapshots of R packages
- Check to make sure it runs on different OSes
- Check integrity of code from contributors before you review the Pull Request
:::


## R CMD Check Workflow `r fontawesome::fa("code", "red")`

::: {.absolute top="0" left="100%"}
::: {.sectionhead}
1 [2 3 4 5 6 7 8]{style="opacity:0.25"}
:::
:::

```{r}
render_file(file.path("workflows", "r-cmd-check.yml"))
```

::: footer
Advanced Usage: [AdmiralCI's R CMD Check Workflow](https://raw.githubusercontent.com/pharmaverse/admiralci/main/.github/workflows/r-cmd-check.yml)
:::

## Link & URL Checks `r fontawesome::fa("link", "green")`

::: {.absolute top="0" left="100%"}
::: {.sectionhead}
[1]{style="opacity:0.25"} 2 [3 4 5 6 7 8]{style="opacity:0.25"}
:::
:::

<br>
Why have a workflow that checks Links in your Package?
<br>


::: {.incremental}
- Cited resources for function development stay current and up to date
- Internal or External website updates cause link breakage
- Contributors type in a link incorrectly
:::

## Link Check Workflow `r fontawesome::fa("link", "green")`

::: {.absolute top="0" left="100%"}
::: {.sectionhead}
[1]{style="opacity:0.25"} 2 [3 4 5 6 7 8]{style="opacity:0.25"}
:::
:::

```{r}
render_file(file.path("workflows", "links.yml"))
```

::: footer
Advanced Usage: [AdmiralCI's Link Check Workflow](https://raw.githubusercontent.com/pharmaverse/admiralci/main/.github/workflows/links.yml)
:::

## Spelling Checks `r fontawesome::fa("pen", "blue")`

::: {.absolute top="0" left="100%"}
::: {.sectionhead}
[1 2]{style="opacity:0.25"} 3 [4 5 6 7 8]{style="opacity:0.25"}
:::
:::

<br>
Why have a workflow that checks the spelling in your package?
<br>


::: {.incremental}
- Industry-specific jargon and acronyms
- Contributors speak different languages
- Focus on the important parts of a Pull Request
:::

## Spelling Workflow `r fontawesome::fa("pen", "blue")`

::: {.absolute top="0" left="100%"}
::: {.sectionhead}
[1 2]{style="opacity:0.25"} 3 [4 5 6 7 8]{style="opacity:0.25"}
:::
:::

```{r}
render_file(file.path("workflows", "spellcheck.yml"))
```

::: footer
Advanced Usage: [AdmiralCI's Spellcheck Workflow](https://raw.githubusercontent.com/pharmaverse/admiralci/main/.github/workflows/spellcheck.yml)
:::

## Code Style `r fontawesome::fa("scroll", "red")`

::: {.absolute top="0" left="100%"}
::: {.sectionhead}
[1 2 3 4 5]{style="opacity:0.25"} 6 [7 8]{style="opacity:0.25"}
:::
:::

<br>
Why have a workflow that checks your Code Style in your Package?
<br>

::: {.incremental}
- Ensures that everyone is using the same style guide
- The code is more legible to developers who use the same guide
- PR reviews are faster when everyone is using the same style
:::

## Code Style Workflow `r fontawesome::fa("scroll", "red")`

::: {.absolute top="0" left="100%"}
::: {.sectionhead}
[1 2 3 4 5]{style="opacity:0.25"} 6 [7 8]{style="opacity:0.25"}
:::
:::


```{r}
render_file(file.path("workflows", "style.yml"))
```

::: footer
Advanced Usage: [AdmiralCI's `styler` Workflow](https://raw.githubusercontent.com/pharmaverse/admiralci/main/.github/workflows/style.yml)
:::

## Linter `r fontawesome::fa("file-lines", "red")`

::: {.absolute top="0" left="100%"}
::: {.sectionhead}
[1 2 3]{style="opacity:0.25"} 4 [5 6 7 8]{style="opacity:0.25"}
:::
:::

<br>
Why have a workflow that runs a Linter in your Package?
<br>


::: {.incremental}
- Static code analysis can be performed without compiling the code
- Potential bugs can be discovered by the linter
- Code best practices are enforced by the linter
:::

## Linter Workflow `r fontawesome::fa("file-lines", "red")`

::: {.absolute top="0" left="100%"}
::: {.sectionhead}
[1 2 3]{style="opacity:0.25"} 4 [5 6 7 8]{style="opacity:0.25"}
:::
:::

```{r}
render_file(file.path("workflows", "linter.yml"))
```

::: footer
Advanced Usage: [AdmiralCI's `lintr` Workflow](https://raw.githubusercontent.com/pharmaverse/admiralci/main/.github/workflows/lintr.yml)
:::

## Manual Pages `r fontawesome::fa("book", "green")`

::: {.absolute top="0" left="100%"}
::: {.sectionhead}
[1 2 3 4]{style="opacity:0.25"} 5 [6 7 8]{style="opacity:0.25"}
:::
:::

<br>
Why have a workflow that checks your Manual pages in your Package?
<br>

::: {.incremental}
- To make sure that all documentation is up-to-date
- Ensure that checks run without errors and warnings
- Makes sure everyone is using the same version of `{roxygen2}`
:::

## Manual Pages Workflow `r fontawesome::fa("book", "green")`

::: {.absolute top="0" left="100%"}
::: {.sectionhead}
[1 2 3 4]{style="opacity:0.25"} 5 [6 7 8]{style="opacity:0.25"}
:::
:::

```{r}
render_file(file.path("workflows", "roxygen.yml"))
```

::: footer
Advanced Usage: [AdmiralCI's `roxygen` Workflow](https://raw.githubusercontent.com/pharmaverse/admiralci/main/.github/workflows/man-pages.yml)
:::

## Test Coverage `r fontawesome::fa("car-burst", "green")`

::: {.absolute top="0" left="100%"}
::: {.sectionhead}
[1 2 3 4 5 6]{style="opacity:0.25"} 7 [8]{style="opacity:0.25"}
:::
:::

<br>
Why have a workflow that checks the Test Coverage in your Package?
<br>

::: {.incremental}
- Most validation frameworks prefer higher code coverage
- Builds user confidence by ensuring a social contract between devs and users
:::

## Test Coverage `r fontawesome::fa("car-burst", "green")`

::: {.absolute top="0" left="100%"}
::: {.sectionhead}
[1 2 3 4 5 6]{style="opacity:0.25"} 7 [8]{style="opacity:0.25"}
:::
:::

```{r}
render_file(file.path("workflows", "coverage.yml"))
```

::: footer
Advanced Usage: [AdmiralCI's `covr` Workflow](https://raw.githubusercontent.com/pharmaverse/admiralci/main/.github/workflows/coverage.yml)
:::

## Publishing a pkgdown site `r fontawesome::fa("wifi", "blue")`

::: {.absolute top="0" left="100%"}
::: {.sectionhead}
[1 2 3 4 5 6 7]{style="opacity:0.25"} 8 [ ]{style="opacity:0.25"}
:::
:::

<br>
Why have a workflow that publishes a website for your Package?
<br>

::: {.incremental}
- Provides a specific destination for all your users
- Ensure that your internal documentation is in sync with external documentation
- Good documentation is like pizza üçï:
  - When it's good, it's good
  - When it's bad, it's still better than nothing!
:::

## Publishing a pkgdown site `r fontawesome::fa("wifi", "blue")`

::: {.absolute top="0" left="100%"}
::: {.sectionhead}
[1 2 3 4 5 6 7]{style="opacity:0.25"} 8 [ ]{style="opacity:0.25"}
:::
:::

```{r}
render_file(file.path("workflows", "pkgdown.yml"))
```

::: footer
Advanced Usage: [AdmiralCI's `pkgdown` Workflow](https://raw.githubusercontent.com/pharmaverse/admiralci/main/.github/workflows/pkgdown.yml)
:::

## We got 8! What's next?

- Further Reading
  - [GitHub Actions](https://docs.github.com/en/actions/learn-github-actions/understanding-github-actions)
  - [GitLab CI](https://docs.gitlab.com/ee/ci/)
- Advanced Examples
  - [r-lib/actions](https://github.com/r-lib/actions)
  - [`{admiralci}`](https://github.com/pharmaverse/admiralci)
  - [Docker](https://www.docker.com/)
- Presentation built with [Quarto](https://quarto.org/)
