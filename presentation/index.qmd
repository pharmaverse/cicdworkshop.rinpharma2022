---
title: "CI/CD in the Pharmaverse"
subtitle: |
  R/Pharma

  November 10th, 2022

  Ben Straub (GSK) & Craig Gower-Page (Roche)
execute:
  echo: false
  warning: false
  error: false
  eval: true
  output: asis
  comment: ''
format:
  revealjs:
    slide-number: true
    chalkboard:
      buttons: false
    preview-links: auto
    logo: https://avatars.githubusercontent.com/u/84541169
    footer: <[CI-CD GitHub](https://github.com/pharmaverse/cicdworkshop.rinpharma2022)>
    theme: [simple, custom.scss]
    from: markdown+emoji
    link-external-icon: true
    link-external-newwindow: true
---

```{r}
render_file <- function(filepath, language = "yaml") {
  cat(paste0("```", language, "\n"))
  cat(readLines(filepath), sep = "\n")
  cat("```\n")
}
```

## What is CI/CD?

* Continuous Integration (CI): Frequent merging of several small changes into a main branch
* Continuous Delivery (CD): Repeatable deployment process when deciding to deploy


## Why use CI/CD at all?

- Catch issues (bugs) early on 
- User base on multiple OSes and multiple R versions
- Faster turnaround on Pull Requests/Merge Requests
- Multiple Contributors on your R Package
- Enforce style conventions and preferences 
- Measure test coverage for new code 
- Keep docs up-to-date

## What does CI/CD for R packages look like?

- Running tests and checks against R packages

1. Unit Tests 
2. Link & URL Checks
3. Spelling Checks
4. Static Code Analysis
5. Manual Pages
6. Code Style
7. Test Coverage
8. Publishing a pkgdown site

## Testing

### Unit Tests

1. Unit Tests: 
2. Test Coverage:
3. Integration tests:

## Static Code Analysis

1. Linting
2. Spell Check
3. Link & URL Checks

## Documentation

1. Man pages
2. pkgdown site

## Specific Use Cases <!-- As a section header -->


## Check Templates

For Admiral, how checking ADAM templates works and why it's needed.

## Need to give confidence that our package is reliable

CICD "validation" job to create a small report that emulates the sort of validation reports that get made locally


## Shiny App Testing

How NEST run Shiny apps tests

## Need to ensure code works on CRAN

Windows, Mac etc testing for CRAN compatibility

Have a manually triggered job that runs on servers that try to emulate CRANS servers as closely as possible. 


## Need to ensure code works on internal servers

DockerFile that emulates internal servers + cicd job to ensure code works in it
 

## CRAN limits runs to 10 minutes

- Extract vignettes to "as-is" instead of being built on the fly
- CICD test to then re-build vignettes to make sure they don't error  (rather than being done in the CRAN-check)
- Extraction of long running unit tests into their own "extended" set of tests
- CRON CICD job that will run the extended unit tests (which last an hour) whilst regular set of unit tests run fine in a couple of minutes


## Unit tests take a long while to run due to the need to compile code

Cache the src/ directory so that it is restored on each run (cache done separately per OS / R-version

